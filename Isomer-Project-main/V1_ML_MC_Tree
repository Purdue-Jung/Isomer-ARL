import numpy as np
import pandas as pd
import scipy.signal as scipy
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import random as random
import time as time

#----------- Opens Local File -----------#

File1 = r"C:\Users\mason\OneDrive\Desktop\Isomer_Project\Trimmed_and_Bunched_Spectrums\Calibration_feb_23_HPGE_134428sec_trimmed_bunched_240.txt"

with open(File1) as Spectrum1:
    data1 = Spectrum1.read()
    data1_array = np.array(list(map(int, data1.split())))
#---------- Smear Function----------#
def smear(unsmeared_data):
    return np.random.normal(unsmeared_data, unsmeared_data*.02,  1)
vsmear = np.vectorize(smear)
#--------- Seed + input + big array-----------#

random.seed(42)
monte_carlo_data = []
simulations = int(input("How many simulations?"))
order_labels = []
#------------- ML Start -------------#
for index in range(simulations):
    data1_array = vsmear(data1_array)
    bin_array = list(range(1,241))
    Energy_bin = 0.64844 + 0.27383 * np.array((25 * np.array(bin_array)) - 12.5)

#----------- Spectrum Plots -----------#
    peaks1, _ = scipy.find_peaks(data1_array, threshold = (data1_array.max()/20e1),
                             prominence = 2.5e4)
    peak_energy_1 = (0.64844 + 0.27383 * np.array((25 * np.array(peaks1)) - 12.5))+6

#----------- Finds peak Intensities -----------#
    peak_counts = data1_array[peaks1]
    
    sorted_peaks = np.argsort(peak_counts)[::-1]

    for j in range(len(peak_energy_1)):
        monte_carlo_data.append([peak_energy_1[j], peak_counts[j]])
        if j < len(peak_counts) - 1 and peak_counts[j] > peak_counts[j + 1]:
            order_labels.append(1)
        else:
            order_labels.append(0)


monte_carlo_data = np.array(monte_carlo_data)
order_labels = np.array(order_labels)


X_train, X_test, y_train, y_test = train_test_split(monte_carlo_data, order_labels, test_size=0.3, random_state=42)

#----------- Train Decision Tree -----------#
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

#----------- Make Predictions -----------#
predictions = clf.predict(X_test)

print("Predictions for Peak Order:\n")
for i, pred in enumerate(predictions):
    print(f"Peak {i+1} (Energy: {X_test[i][0]:8.3f} keV, Count: {X_test[i][1]:7.0f} ) -> Order Prediction: {pred}")
print(predictions)
#----------- Visualizing the Tree -----------#
from sklearn.tree import plot_tree

plt.figure(figsize=(12, 8))
plot_tree(clf, filled=True, feature_names=["Energy", "Counts"], class_names=["Before", "After"], rounded=True)
plt.title("Decision Tree Trained with Monte Carlo Data")
plt.show()
