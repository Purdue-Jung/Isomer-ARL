import os
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm

folder_path=r'C:\Isomer_Project\Trimmed_and_Bunched_Spectrums'
energy_coin_tot = []
file_names = [filename for filename in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, filename))]

for file_name in file_names:
    full_name = os.path.join(folder_path, file_name)
    File1 = full_name
    File2 = full_name
    with open(File1) as Spectrum1, open(File2) as Spectrum2:
        data1 = Spectrum1.read()
        data2 = Spectrum2.read()
        data1_array = np.array(list(map(int, data1.split())))
        data2_array = np.array(list(map(int, data2.split())))
    
    bin_array = list(range(1,241))
    Energy_bin = 0.64844 + 0.27383 * np.array((25 * np.array(bin_array)) - 12.5)
    
    Spec1E_array = np.column_stack((data1_array, Energy_bin))
    Spec2E_array = np.column_stack((data2_array, Energy_bin))

    #----------- Calculations -----------#
    bin1_num = 1
    scatter1_x = []
    scatter1_y = []
    while (bin1_num >= 0) and (bin1_num <= 239):
        riemann1 = sum(data1_array[(bin1_num-1):(bin1_num+1)])/ len(data1_array[(bin1_num-1):(bin1_num+1)])
        if data1_array[bin1_num] > riemann1 + (data1_array.max()/1.2e1):
            scatter1_x.append(Energy_bin[bin1_num])
            scatter1_y.append(data1_array[bin1_num])
        bin1_num += 1
        
    bin2_num = 1
    scatter2_x = []
    scatter2_y = []
    while (bin2_num >= 0) & (bin2_num <= 239):
        riemann2 = sum(data2_array[(bin2_num-1):(bin2_num+1)])/ len(data2_array[(bin2_num-1):(bin2_num+1)])
        if data2_array[bin2_num] > riemann2 + (data1_array.max()/1.2e1):
            scatter2_x.append(Energy_bin[bin2_num])
            scatter2_y.append(data2_array[bin2_num])
        bin2_num += 1

    spec1_energy = np.array(scatter1_x)
    spec2_energy = np.array(scatter2_x)
    
    #~Creates Spec 1 and 2 Coincidneces~#
    energy_coin=[]
    for i in range(len(spec1_energy)):
        for j in range(len(spec2_energy)):
            energy_pair = (spec1_energy[i], spec2_energy[j])
            energy_coin.append(energy_pair)
    energy_coin = np.array(energy_coin)
    energy_coin_tot.append(energy_coin)

    #----------- Heat Map -----------#    
energy_coin_tot = np.concatenate(energy_coin_tot, axis = 0)
energy_coin_x = energy_coin_tot[:, 0]
energy_coin_y = energy_coin_tot[:, 1]
plot_extend_x = np.linspace(Energy_bin.min(), Energy_bin.max(), len(Energy_bin))
plot_extend_y = np.linspace(Energy_bin.min(), Energy_bin.max(), len(Energy_bin))
heatmap, _, _ = np.histogram2d(energy_coin_x, energy_coin_y, bins =[plot_extend_x, plot_extend_y])
xpos, ypos = np.meshgrid(Energy_bin.max(), Energy_bin.max(), indexing="ij")
plt.figure(figsize=(10, 8))
plt.imshow(heatmap.T, origin='lower', cmap='plasma', norm=LogNorm(vmin=1, vmax=(heatmap.max())), 
           extent=[Energy_bin.min(), Energy_bin.max() , Energy_bin.min(), Energy_bin.max()])
plt.colorbar(label='Counts')
plt.xlabel('Energy from Spectrum 1 (keV)')
plt.ylabel('Energy from Spectrum 2 (keV)')
plt.title('Energy Matrix of Spectrum 1 and 2')
plt.show()
